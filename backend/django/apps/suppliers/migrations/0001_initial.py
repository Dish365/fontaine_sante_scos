# Generated by Django 5.2.1 on 2025-05-31 09:55

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Material',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('unit', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='EmissionFactor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transport_mode', models.CharField(choices=[('truck', 'Truck'), ('train', 'Train'), ('ship', 'Ship'), ('plane', 'Plane')], help_text='Mode of transportation', max_length=20)),
                ('vehicle_type', models.CharField(blank=True, choices=[('small_truck', 'Small Truck (< 3.5 tons)'), ('medium_truck', 'Medium Truck (3.5-16 tons)'), ('large_truck', 'Large Truck (> 16 tons)'), ('electric_vehicle', 'Electric Vehicle'), ('hybrid_vehicle', 'Hybrid Vehicle')], help_text='Type of vehicle (for road transport)', max_length=20, null=True)),
                ('fuel_type', models.CharField(blank=True, choices=[('diesel', 'Diesel'), ('petrol', 'Petrol'), ('electric', 'Electric'), ('hybrid', 'Hybrid'), ('biodiesel', 'Biodiesel'), ('cng', 'Compressed Natural Gas')], help_text='Type of fuel used', max_length=20, null=True)),
                ('base_emission_factor', models.FloatField(help_text='Base emission factor in kg CO2e per km', validators=[django.core.validators.MinValueValidator(0)])),
                ('volume_factor', models.FloatField(help_text='Volume impact factor', validators=[django.core.validators.MinValueValidator(0)])),
                ('load_factor_impact', models.FloatField(help_text='Load factor impact on emissions', validators=[django.core.validators.MinValueValidator(0)])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Emission Factor',
                'verbose_name_plural': 'Emission Factors',
                'ordering': ['transport_mode', 'vehicle_type', 'fuel_type'],
                'unique_together': {('transport_mode', 'vehicle_type', 'fuel_type')},
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('order_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('order_date', models.DateTimeField(auto_now_add=True)),
                ('expected_delivery_date', models.DateField()),
                ('actual_delivery_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('in_progress', 'In Progress'), ('shipped', 'Shipped'), ('delivered', 'Delivered'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_orders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-order_date'],
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('material', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='suppliers.material')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='suppliers.order')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('contact_person', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=20)),
                ('address', models.TextField()),
                ('min_supply_capacity', models.DecimalField(decimal_places=2, help_text='Minimum supply capacity per order', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('max_supply_capacity', models.DecimalField(decimal_places=2, help_text='Maximum supply capacity per order', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('current_capacity', models.DecimalField(decimal_places=2, help_text='Current available capacity', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('transportation_mode', models.CharField(choices=[('road', 'Road Transport'), ('rail', 'Rail Transport'), ('air', 'Air Transport'), ('sea', 'Sea Transport'), ('mixed', 'Mixed Transport')], default='road', max_length=10)),
                ('transportation_details', models.TextField(blank=True, help_text='Additional details about transportation methods and capabilities', null=True)),
                ('environmental_certification', models.CharField(choices=[('iso14001', 'ISO 14001'), ('iso50001', 'ISO 50001'), ('green_business', 'Green Business Certification'), ('carbon_neutral', 'Carbon Neutral Certified'), ('none', 'No Certification')], default='none', help_text='Environmental certification status', max_length=20)),
                ('carbon_footprint', models.DecimalField(blank=True, decimal_places=2, help_text='Annual carbon footprint in metric tons CO2e', max_digits=10, null=True)),
                ('renewable_energy_usage', models.DecimalField(blank=True, decimal_places=2, help_text='Percentage of energy from renewable sources', max_digits=5, null=True)),
                ('waste_management_policy', models.TextField(blank=True, help_text='Description of waste management practices')),
                ('environmental_impact_report', models.URLField(blank=True, help_text='URL to latest environmental impact report')),
                ('sustainability_goals', models.TextField(blank=True, help_text='Description of sustainability goals and targets')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_suppliers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='order',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='suppliers.supplier'),
        ),
        migrations.CreateModel(
            name='SupplierAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('assessment_date', models.DateField()),
                ('next_assessment_date', models.DateField(blank=True, null=True)),
                ('score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_supplier_assessments', to=settings.AUTH_USER_MODEL)),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='supplier_assessments', to='suppliers.supplier')),
            ],
            options={
                'ordering': ['-assessment_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SupplierMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost_per_unit', models.DecimalField(decimal_places=2, help_text='Cost per unit of the material', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('lead_time', models.IntegerField(help_text='Lead time in days', validators=[django.core.validators.MinValueValidator(0)])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('material', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='suppliers.material')),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='suppliers.supplier')),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('supplier', 'material')},
            },
        ),
        migrations.AddField(
            model_name='supplier',
            name='materials',
            field=models.ManyToManyField(related_name='suppliers', through='suppliers.SupplierMaterial', to='suppliers.material'),
        ),
        migrations.CreateModel(
            name='TransportationEmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.FloatField(help_text='Distance in kilometers', validators=[django.core.validators.MinValueValidator(0)])),
                ('volume', models.FloatField(help_text='Volume in cubic meters', validators=[django.core.validators.MinValueValidator(0)])),
                ('transport_mode', models.CharField(choices=[('truck', 'Truck'), ('train', 'Train'), ('ship', 'Ship'), ('plane', 'Plane')], help_text='Mode of transportation', max_length=20)),
                ('vehicle_type', models.CharField(blank=True, choices=[('small_truck', 'Small Truck (< 3.5 tons)'), ('medium_truck', 'Medium Truck (3.5-16 tons)'), ('large_truck', 'Large Truck (> 16 tons)'), ('electric_vehicle', 'Electric Vehicle'), ('hybrid_vehicle', 'Hybrid Vehicle')], help_text='Type of vehicle (required for road transport)', max_length=20, null=True)),
                ('fuel_type', models.CharField(blank=True, choices=[('diesel', 'Diesel'), ('petrol', 'Petrol'), ('electric', 'Electric'), ('hybrid', 'Hybrid'), ('biodiesel', 'Biodiesel'), ('cng', 'Compressed Natural Gas')], help_text='Type of fuel used', max_length=20, null=True)),
                ('load_factor', models.FloatField(help_text='Load factor (0-1) representing how full the vehicle is', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('return_trip', models.BooleanField(default=False, help_text='Whether to include return trip emissions')),
                ('total_emissions', models.FloatField(help_text='Total emissions in kg CO2e', validators=[django.core.validators.MinValueValidator(0)])),
                ('emissions_per_km', models.FloatField(help_text='Emissions per kilometer', validators=[django.core.validators.MinValueValidator(0)])),
                ('emissions_per_volume', models.FloatField(help_text='Emissions per cubic meter', validators=[django.core.validators.MinValueValidator(0)])),
                ('transport_efficiency_score', models.FloatField(help_text='Transport efficiency score (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transportation_emissions', to='suppliers.supplier')),
            ],
            options={
                'verbose_name': 'Transportation Emission',
                'verbose_name_plural': 'Transportation Emissions',
                'ordering': ['-created_at'],
            },
        ),
    ]
